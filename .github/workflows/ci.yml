name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '22'
  PNPM_VERSION: '10.16.1'

jobs:
  # Security and Dependency Audit
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run security audit
        run: pnpm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: |
          VULN_COUNT=$(pnpm audit --audit-level moderate --json 2>/dev/null | jq '.metadata.vulnerabilities.total' || echo "0")
          echo "Found $VULN_COUNT vulnerabilities"
          if [ "$VULN_COUNT" -gt 0 ]; then
            echo "❌ Security vulnerabilities detected: $VULN_COUNT"
            exit 1
          else
            echo "✅ No security vulnerabilities found"
          fi

  # Code Quality Checks
  quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @discord-bot/database prisma:generate

      - name: TypeScript type checking
        run: pnpm typecheck

      - name: ESLint
        run: pnpm lint

      - name: Build all packages
        run: pnpm build

      - name: Archive build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/dist/
            !node_modules/
          retention-days: 1

  # Unit & Integration Tests
  tests:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [security, quality]

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: discord_bot_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate Prisma client
        run: pnpm --filter @discord-bot/database prisma:generate

      - name: Build packages
        run: pnpm build

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/discord_bot_test
          REDIS_URL: redis://localhost:6379
        run: |
          pnpm --filter @discord-bot/database prisma migrate deploy
          pnpm --filter @discord-bot/database prisma db seed

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/discord_bot_test
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: pnpm test --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Performance Testing
  performance:
    name: ⚡ Performance Testing
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality]
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Install dependencies (production only)
        run: pnpm install --frozen-lockfile --prod

      - name: Run performance analysis
        run: |
          mkdir -p reports
          node --expose-gc scripts/generate-perf-report.js > performance-report.txt
          echo "## 📊 Performance Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat performance-report.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

      - name: Check performance thresholds
        run: |
          # Memory usage threshold: 100MB
          if ls reports/performance-report-*.json 1> /dev/null 2>&1; then
            MEMORY_USAGE=$(node -e "
              const fs = require('fs');
              const files = fs.readdirSync('reports').filter(f => f.startsWith('performance-report'));
              if (files.length > 0) {
                const report = JSON.parse(fs.readFileSync('reports/' + files[0]));
                const memoryMB = parseInt(report.summary.totalMemoryUsage.replace('MB', ''));
                console.log(memoryMB);
              } else {
                console.log(50);
              }
            ")

            if [ "$MEMORY_USAGE" -gt 100 ]; then
              echo "❌ Memory usage ($MEMORY_USAGE MB) exceeds 100MB threshold"
              exit 1
            else
              echo "✅ Memory usage ($MEMORY_USAGE MB) within acceptable limits"
            fi
          else
            echo "⚠️ No performance report generated, assuming acceptable"
          fi

  # Docker Build & Test
  docker:
    name: 🐳 Docker Build
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [tests, performance]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Gateway service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./gateway/Dockerfile
          tags: discord-bot-gateway:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Build Audio service
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./audio/Dockerfile
          tags: discord-bot-audio:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Test Docker containers
        run: |
          # Start containers and verify health
          docker run --rm -d --name gateway-test \
            -e NODE_ENV=test \
            discord-bot-gateway:test

          docker run --rm -d --name audio-test \
            -e NODE_ENV=test \
            discord-bot-audio:test

          # Wait for containers to start
          sleep 10

          # Check if containers are running
          if docker ps | grep -q gateway-test && docker ps | grep -q audio-test; then
            echo "✅ Docker containers started successfully"
          else
            echo "❌ Docker containers failed to start"
            docker logs gateway-test || true
            docker logs audio-test || true
            exit 1
          fi

          # Cleanup
          docker stop gateway-test audio-test || true

  # Deployment Readiness Check
  deployment-ready:
    name: 🚀 Deployment Ready
    runs-on: ubuntu-latest
    needs: [security, quality, tests, performance, docker]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deployment Ready Summary
        run: |
          echo "## 🎉 Deployment Ready!" >> $GITHUB_STEP_SUMMARY
          echo "All CI checks have passed successfully:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security audit passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code quality checks passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Performance thresholds met" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Docker builds successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 Ready for deployment to production!" >> $GITHUB_STEP_SUMMARY