datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

model GuildConfig {
  id        String   @id @default(cuid())
  guildId   String   @unique
  prefix    String?
  language  String   @default("en")
  createdAt DateTime @default(now())
}

model Queue {
  id        String   @id @default(cuid())
  guildId   String
  createdAt DateTime @default(now())
  voiceChannelId String?
  textChannelId  String?
  items     QueueItem[]

  @@index([guildId])
  @@index([guildId, createdAt])
  @@index([voiceChannelId])
}

model QueueItem {
  id          String   @id @default(cuid())
  queueId     String
  title       String
  url         String
  requestedBy String
  duration    Int
  createdAt   DateTime @default(now())
  queue       Queue    @relation(fields: [queueId], references: [id])

  @@index([queueId])
  @@index([queueId, createdAt])
  @@index([url])
  @@index([requestedBy])
}

model UserProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
}

model AuditLog {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  action    String
  createdAt DateTime @default(now())
  
  @@index([guildId])
  @@index([userId])
  @@index([guildId, createdAt])
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique
  count     Int      @default(0)
  expiresAt DateTime
  
  @@index([expiresAt])
}

model FeatureFlag {
  id        String   @id @default(cuid())
  guildId   String
  name      String
  enabled   Boolean  @default(false)
  @@unique([guildId, name])
  @@index([guildId])
  @@index([name])
}

// Event Store Tables for Event Sourcing
model EventStoreEvent {
  id                Int      @id @default(autoincrement())
  eventId           String   @unique
  eventType         String
  aggregateId       String
  aggregateType     String
  aggregateVersion  Int
  eventData         String   // JSON
  metadata          String   // JSON
  timestamp         DateTime
  createdAt         DateTime @default(now())
  globalPosition    Int      @default(autoincrement())

  @@index([aggregateId, aggregateType])
  @@index([aggregateId, aggregateType, aggregateVersion])
  @@index([eventType])
  @@index([timestamp])
  @@index([globalPosition])
  @@unique([aggregateId, aggregateType, aggregateVersion])
}

model EventStoreSnapshot {
  id            Int      @id @default(autoincrement())
  aggregateId   String
  aggregateType String
  version       Int
  data          String   // JSON
  timestamp     DateTime
  createdAt     DateTime @default(now())

  @@unique([aggregateId, aggregateType])
  @@index([aggregateType])
  @@index([timestamp])
}
