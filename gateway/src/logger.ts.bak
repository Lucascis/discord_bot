/**
 * Simple logger implementation for gateway service
 * Production version should use the @discord-bot/logger package
 */

export interface LogContext {
  [key: string]: unknown;
}

class SimpleLogger {
  private readonly serviceName = 'gateway';

  info(message: string | LogContext, ...args: unknown[]): void {
    if (typeof message === 'string') {
      console.log(`[INFO] [${this.serviceName}] ${message}`, ...args);
    } else {
      console.log(`[INFO] [${this.serviceName}]`, message, ...args);
    }
  }

  warn(message: string | LogContext, ...args: unknown[]): void {
    if (typeof message === 'string') {
      console.warn(`[WARN] [${this.serviceName}] ${message}`, ...args);
    } else {
      console.warn(`[WARN] [${this.serviceName}]`, message, ...args);
    }
  }

  error(message: string | LogContext, ...args: unknown[]): void {
    if (typeof message === 'string') {
      console.error(`[ERROR] [${this.serviceName}] ${message}`, ...args);
    } else {
      console.error(`[ERROR] [${this.serviceName}]`, message, ...args);
    }
  }

  debug(message: string | LogContext, ...args: unknown[]): void {
    if (process.env.NODE_ENV === 'development' || process.env.LOG_LEVEL === 'debug') {
      if (typeof message === 'string') {
        console.debug(`[DEBUG] [${this.serviceName}] ${message}`, ...args);
      } else {
        console.debug(`[DEBUG] [${this.serviceName}]`, message, ...args);
      }
    }
  }
}

export const logger = new SimpleLogger();

export async function initializeSentry(options: {
  dsn?: string;
  environment?: string;
  serviceName?: string;
  tracesSampleRate?: number;
  profilesSampleRate?: number;
}): Promise<void> {
  // Stub implementation - in production use actual Sentry SDK
  logger.info('Sentry initialization (stub)', options);
}