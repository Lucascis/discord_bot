# Redis Configuration for Discord Bot Production
# Optimized for pub/sub messaging and caching

# Memory Management
maxmemory 512mb
maxmemory-policy allkeys-lru
maxmemory-samples 5

# Persistence Configuration
# For Discord bot, we can use RDB snapshots for cache recovery
save 900 1
save 300 10
save 60 10000

# Disable AOF for better performance (cache data is non-critical)
appendonly no

# Network Configuration
tcp-keepalive 300
timeout 300

# Performance Tuning
tcp-backlog 511
databases 16

# Logging
loglevel notice
logfile ""

# Security
# Note: In production, bind to specific interfaces and use authentication
bind 0.0.0.0
protected-mode no

# Client Configuration
# Optimized for microservices with multiple connections
maxclients 1000

# Connection Pool Optimization
# Reduce connection overhead for microservices
tcp-nodelay yes
tcp-keepalive 300

# Client Connection Management
# Optimize for frequent reconnections from services
client-output-buffer-limit normal 0 0 0
client-output-buffer-limit replica 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# Idle Connection Management
# Close idle connections to free resources
timeout 300

# Slow Log Configuration
slowlog-log-slower-than 10000
slowlog-max-len 128

# Key Expiration
# Active expiration for TTL-based cache cleanup
hz 10

# Background Saving
stop-writes-on-bgsave-error yes
rdbcompression yes
rdbchecksum yes

# Memory Usage Optimization
hash-max-ziplist-entries 512
hash-max-ziplist-value 64
list-max-ziplist-size -2
list-compress-depth 0
set-max-intset-entries 512
zset-max-ziplist-entries 128
zset-max-ziplist-value 64
